

@model USM.DAL.Models.User

@{
    Layout = null;
}

    <div tabindex="-1" ng-controller="SubmitControl" id="CreateUserApp" ng-init="failed=0;success=0;loading=0;button='Create User';error=0;">
        <div class="width100">
            <div class="modal-content">
                <div class="modal-header">
    @using (Html.BeginForm("actionName", "controllerName", FormMethod.Post, new {angular_validator="", novalidate="", ng_submit = "Submit()", role = "form", id = "CreateUserAppForm", name = "CreateUserAppForm" })) 
    {
        @Html.AntiForgeryToken()

    
        <div class="form-horizontal">
            <div class="bs-callout bs-callout-primary form-group">
                <h4>Create User</h4>
            </div>
                <div class="alert alert-danger animate-show-hide" role="alert" ng-show="error">
                    <span class="glyphicon glyphicon-remove"></span> {{ErrorMessage}}
                </div>
                <div ng-show="loading">
                    <div class="circle"></div>
                    <div class="circle1"></div>
                </div>
                <div ng-show="!loading && !success">

                    <div class="form-group">
                        <div class="input-group">
                            <span class="input-group-addon" id="basic-addon1" title="Username"><span class="glyphicon glyphicon-user required"></span></span>
                            @Html.EditorFor(model => model.Username, new
                   {
                       htmlAttributes = new
                       {
                           @class = "form-control",
                           aria_describedby = "basic-addon1",
                           required = "required",
                           autofocus = "autofocus",
                           placeholder = Html.DisplayNameFor(model => model.Username),
                           ng_model = "Username",
                           ng_class = @"{ 'has-error' : CreateUserAppForm.Username.$invalid && !CreateUserAppForm.Username.$pristine }"
                       }
                   })
                        </div>
                        @Html.ValidationMessageFor(model => model.Username)
                    </div>
                    
                    <div class="form-group">
                        <div class="input-group">
                            <span class="input-group-addon" id="basic-addon1" title="Password"><span class="glyphicon glyphicon-asterisk required"></span></span>
                            @Html.EditorFor(model => model.Password, new
                   {
                       htmlAttributes = new
                       {
                           @class = "form-control",
                           aria_describedby = "basic-addon1"
                           ,
                           required = "required",
                           autofocus = "autofocus",
                           placeholder = Html.DisplayNameFor(model => model.Password),
                           ng_model = "Password"
                       }
                   })
                        </div>
                        @Html.ValidationMessageFor(model => model.Password)
                    </div>

                    <div class="form-group">
                        <div class="input-group">
                            <span class="input-group-addon" id="basic-addon1" title="Full Name"><span class="glyphicon glyphicon-align-justify required"></span></span>
                            @Html.EditorFor(model => model.FullName, new
                   {
                       htmlAttributes = new
                       {
                           @class = "form-control",
                           aria_describedby = "basic-addon1"
                           ,
                           required = "required",
                           autofocus = "autofocus",
                           placeholder = Html.DisplayNameFor(model => model.FullName),
                           ng_model = "FullName"
                       }
                   })
                        </div>
                        @Html.ValidationMessageFor(model => model.FullName)
                    </div>

                    <div class="form-group">
                        <div class="input-group">
                            <span class="input-group-addon" id="basic-addon1" title="Email"><span class="glyphicon glyphicon- email-icon "></span></span>
                            @Html.EditorFor(model => model.Email, new
                   {
                       htmlAttributes = new
                       {
                           @class = "form-control",
                           aria_describedby = "basic-addon1"
                           ,
                           autofocus = "autofocus",
                           placeholder = Html.DisplayNameFor(model => model.Email),
                           ng_model = "Email"
                       }
                   })
                        </div>
                        @Html.ValidationMessageFor(model => model.Email)
                    </div>

                    <div class="form-group">
                        <div class="input-group">
                            <span class="input-group-addon" id="basic-addon1" title="Mobile Number"><span class="glyphicon glyphicon-align-justify "></span></span>
                            @Html.EditorFor(model => model.MobileNumber, new
                   {
                       htmlAttributes = new
                       {
                           @class = "form-control",
                           aria_describedby = "basic-addon1"
                           ,
                           autofocus = "autofocus",
                           placeholder = Html.DisplayNameFor(model => model.MobileNumber),
                           ng_model = "MobileNumber"
                       }
                   })
                        </div>
                        @Html.ValidationMessageFor(model => model.MobileNumber)
                    </div>

                    <div class="form-group">
                        <div class="input-group">
                            <span class="input-group-addon required" id="basic-addon1" title="User Status">@Html.DisplayNameFor(model => model.UserIsDisabled)</span>
                            <div class="checkbox form-control input-background">
                                <label>
                                    <input id="UserIsDisabled" type="checkbox" ng_model="UserIsDisabled" checked data-on="Enabled" data-off="Disabled" data-toggle="toggle" data-size="small">
                                    <script>$('#UserIsDisabled').bootstrapToggle();</script>
                                </label>
                            </div>
                            <script>

                            </script>
                        </div>
                        @Html.ValidationMessageFor(model => model.UserIsDisabled)
                    </div>

                    <div class="form-group">
                        <div class="input-group">
                            <span class="input-group-addon" id="basic-addon1" title="Role"><span class="glyphicon glyphicon-align-justify required"></span></span>
                            @Html.DropDownList("RoleID", (IEnumerable<SelectListItem>)ViewBag.PriorityID, "Choose a Role...", new { @class = "chosen-select", required = "required", ng_model = "RoleID", data_placeholder = "Choose a Role..." })
                        </div>
                        @Html.ValidationMessageFor(model => model.RoleID)
                    </div>

                </div>
                <div class="form-group">
                    <div class="content-fluid">
                        <center>
                            <input ng-click="Submit()" ng-show="!success" ng-disabled="loading" type="submit" value="{{button}}" class="btn btn-lg btn-primary" />
                        </center>
                    </div>
                </div>
            </div>
            }
    </div>
        </div>
    </div>
</div>
<script>
    $(".chosen-select").chosen({ width: "100%" });
    HomeApp.registerCtrl('SubmitControl', function ($scope, $http, ngProgress, $window, $location, $routeParams) {
        //alert($routeParams.userID);
        $scope.ErrorMessage = "";
        $scope.Submit = function () {
            if (!$scope.CreateUserAppForm.$invalid) {
                $scope.setLoading(true);
                $scope.failed = 0;
                $scope.error = 0;
                $scope.button = "Creating User, please wait...";
                var _userIsDisabled = $('#UserIsDisabled').prop('checked')?"Enabled":"Disabled";
                $http.post('@Url.Content("~/")api/UserAPI', {
                    'Username': $scope.Username, 'Password': $scope.Password, 'FullName': $scope.FullName,
                    'Email': $scope.Email, 'MobileNumber': $scope.MobileNumber, 'UserIsDisabled': _userIsDisabled, 'RoleID': $scope.RoleID
                }).success(function (data) {
                    if (data.success)
                    {
                        $scope.setLoading(false);
                        $scope.failed = 0;
                        $scope.success = 1;
                        $location.path('/success/Object/User/Action/Created/ObjectIdName/UserID');
                    }//if
                    else
                    {
                        $scope.ErrorMessage = "Request could not be performed (Reason:" + data.message + ")";
                        $scope.error = 1;
                        $scope.setLoading(false);
                        $scope.button = "Create User";
                    }
                    //alert("Success!");
                }).error(function (data, status, headers, config) {
                    //alert("Error Number:" + status);
                    $scope.ErrorMessage = "Request could not be performed (Error Number:" + status +")";
                    $scope.error = 1;
                    $scope.setLoading(false);
                    $scope.button = "Create User";
                    //alert("Error!");
                });
            };
        };
        $scope.setLoading = function (isLoading) { $scope.loading = isLoading; if (isLoading) ngProgress.start(); else ngProgress.complete(); };
    });
    
    
    $('form').submit(function (evt) {
        evt.preventDefault();
    });
</script>
