<#@ template language="C#" HostSpecific="True" debug="true" #>
<#@ output extension=".cshtml" #>
<#@ include file="Imports.include.t4" #>
@model <#= ViewDataTypeName #>
<#
System.Type type = System.Type.GetType(ViewDataTypeName+", USM.DAL, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null");
System.Attribute[] attrs = System.Attribute.GetCustomAttributes(type);
string _modelDisplayName = ViewDataTypeShortName;
foreach (System.Attribute att in attrs)
{ 
    if(att.TypeId.ToString()=="System.ComponentModel.DisplayNameAttribute")
		_modelDisplayName = ((System.ComponentModel.DisplayNameAttribute)att).DisplayName;
}

// The following chained if-statement outputs the file header code and markup for a partial view, a view using a layout page, or a regular view.
if(IsPartialView) {
#>

<#
} else if(IsLayoutPageSelected) {
#>

@{
    ViewBag.Title = "Create <#= _modelDisplayName#>";
<#
if (!String.IsNullOrEmpty(LayoutPageFile)) {
#>
    Layout = "<#= LayoutPageFile#>";
<#
}
#>
}

<h2><#= ViewName#></h2>

<#
} else {
#>

@{
    Layout = null;
}

<#
    PushIndent("    ");
}
#>
<#
if (ReferenceScriptLibraries) {
#>
<#
    if (!IsLayoutPageSelected && IsBundleConfigPresent) {
#>
@Scripts.Render("~/bundles/jquery")
@Scripts.Render("~/bundles/jqueryval")

<#
    }
#>
<#
    else if (!IsLayoutPageSelected) {
#>
<script src="~/Scripts/jquery-<#= JQueryVersion #>.min.js"></script>
<script src="~/Scripts/jquery.validate.min.js"></script>
<script src="~/Scripts/jquery.validate.unobtrusive.min.js"></script>

<#
    }
#>

<#
}
#>
<div tabindex="-1" ng-controller="SubmitControl" id="Create<#= ViewDataTypeShortName #>App" ng-init="failed=0;success=0;loading=0;button='Create <#= _modelDisplayName#>';error=0;">
    <div class="width100">
        <div class="modal-content">
            <div class="modal-header">
@using (Html.BeginForm("actionName", "controllerName", FormMethod.Post, new {angular_validator="", novalidate="",ng_submit="Submit()", role="form",  id="Create<#= ViewDataTypeShortName #>AppForm",  name="Create<#= ViewDataTypeShortName #>AppForm"})) 
{
    @Html.AntiForgeryToken()
    
    <div class="form-horizontal">
        <div class="bs-callout bs-callout-info form-group">
			<h4>Create <#= _modelDisplayName #></h4>
		</div>
        <div class="alert alert-danger animate-show-hide" role="alert" ng-show="error">
            <span class="glyphicon glyphicon-remove"></span> {{ErrorMessage}}
        </div>
        <div ng-show="loading">
            <div class="circle"></div>
            <div class="circle1"></div>
        </div>
		<div ng-show="!loading">
		
<#
string _jsonParams = "";
string _jsCode = "";
int _index = -1;
int _paramsIndex = -1;

var properties = type.GetProperties();
PropertyInfo currentProperty = null;
foreach (PropertyMetadata property in ModelMetadata.Properties) {
	_index++;
    string _icon = "align-justify";
	string _displayName = property.PropertyName;
	string _required = "";
	string _requiredParam = "";
	if (property.Scaffold && !property.IsAutoGenerated && !property.IsReadOnly && !property.IsAssociation) {
		_paramsIndex++;
		foreach(PropertyInfo _property in properties)
		{
			if(_property.Name==property.PropertyName)
			{
				currentProperty = _property;
				break;
			}
		}
		var icon = currentProperty.GetCustomAttributes(typeof(USM.DAL.Icon),false);
		var displayName = currentProperty.GetCustomAttributes(typeof(System.ComponentModel.DisplayNameAttribute), false);
		var displayRadio = currentProperty.GetCustomAttributes(typeof(USM.DAL.DisplayAsRadio), false);
		var required = currentProperty.GetCustomAttributes(typeof(System.ComponentModel.DataAnnotations.RequiredAttribute), false);
        if(icon.Length>0)
        { 
            _icon = ((USM.DAL.Icon)icon[0]).IconName;
        }
		if (displayName.Length > 0)
        {
           _displayName = ((System.ComponentModel.DisplayNameAttribute)displayName[0]).DisplayName;
        }

		if (required.Length > 0)
        {
           _required = "required";
		   _requiredParam = ",required=\"required\"";
        }
#>
        <div class="form-group">
<#
        if(_paramsIndex!=0){_jsonParams += ",";}
		if(displayRadio.Length==0)
				_jsonParams+= "'"+ property.PropertyName +"': $scope."+ property.PropertyName;
		if (property.IsForeignKey) {
#>
                <div class="input-group">
					<span class="input-group-addon" id="basic-addon1" title="<#= _displayName #>"><span class="glyphicon glyphicon-<#= _icon #> <#= _required #>"></span></span>
					@Html.DropDownList("<#= property.PropertyName #>", (IEnumerable<SelectListItem>)ViewBag.PriorityID,"Choose a <#= _displayName #>...", new { @class = "chosen-select" <#= _requiredParam #>, ng_model="<#= property.PropertyName #>", data_placeholder="Choose a <#= _displayName #>..."})					
				</div>
<#
        } else {
#>
	<# if(displayRadio.Length==0){ #>
					<div class="input-group">
					<span class="input-group-addon" id="basic-addon1" title="<#= _displayName #>"><span class="glyphicon glyphicon-<#= _icon #> <#= _required #>"></span></span>
					@Html.EditorFor(model => model.<#= property.PropertyName #>, new { htmlAttributes = new { @class = "form-control", aria_describedby="basic-addon1" <#= _requiredParam #> ,autofocus = "autofocus", placeholder=Html.DisplayNameFor(model => model.<#= property.PropertyName #>) , ng_model="<#= property.PropertyName #>"}
							})
					</div>
	<# } else {
			_jsCode += "var _"+property.PropertyName+"Checked = $('#"+property.PropertyName+"').prop('checked');";
			_jsonParams+= "'"+ property.PropertyName +"': _"+property.PropertyName+"Checked";
	#>
				<div class="input-group">
					<span class="input-group-addon <#= _required #>" id="basic-addon1" title="<#= _displayName #>">@Html.DisplayNameFor(model => model.<#= property.PropertyName #>)</span>
                    <div class="checkbox form-control input-background">
                        <label>
                            <input id="<#= property.PropertyName #>" type="checkbox" ng_model="<#= property.PropertyName #>" checked data-on="<#= ((USM.DAL.DisplayAsRadio)displayRadio[0]).Name1 #>" data-off="<#= ((USM.DAL.DisplayAsRadio)displayRadio[0]).Name2 #>" data-toggle="toggle" data-size="small">
                        </label>
                    </div>
					<script>
						$('#<#= property.PropertyName #>').bootstrapToggle()
					</script>
				</div>
	<#}#>
<#
        }
#>
                @Html.ValidationMessageFor(model => model.<#= property.PropertyName #>)
        </div>

<#
    }
}
#>
        </div>
		<div class="form-group">
            <div class="content-fluid">
    			<center>
                    <input ng-click="Submit()" ng-show="!success" ng-disabled="loading" type="submit" value="{{button}}" class="btn btn-lg btn-primary" />
    			</center>
            </div>
        </div>
    </div>
}

<#
if(IsLayoutPageSelected && ReferenceScriptLibraries && IsBundleConfigPresent) {
#>

@section Scripts {
    @Scripts.Render("~/bundles/jqueryval")
}
<#
}
#>
<#
else if(IsLayoutPageSelected && ReferenceScriptLibraries) {
#>

<script src="~/Scripts/jquery-<#= JQueryVersion #>.min.js"></script>
<script src="~/Scripts/jquery.validate.min.js"></script>
<script src="~/Scripts/jquery.validate.unobtrusive.min.js"></script>
<#
}
#>
<#
// The following code closes the tag used in the case of a view using a layout page and the body and html tags in the case of a regular view page
#>
<#
if(!IsPartialView && !IsLayoutPageSelected) {
    ClearIndent();
#>
<#
}
#>
			</div>
        </div>
    </div>
</div>
<script>
	$(".chosen-select").chosen({width: "100%"})
	HomeApp.registerCtrl('SubmitControl', function ($scope, $http, ngProgress, $window, $location) {
        $scope.ErrorMessage = "";
        $scope.Submit = function () {
            if (!$scope.Create<#= ViewDataTypeShortName #>AppForm.$invalid) {
                $scope.setLoading(true);
                $scope.failed = 0;
                $scope.error = 0;
                $scope.button = "Creating <#= _modelDisplayName#>, please wait...";
                <#= _jsCode #>
                $http.post('@Url.Content("~/")api/<#= ViewDataTypeShortName #>API', {
				<#= _jsonParams #>
                }).success(function (data) {
                    if (data.success)
                    {
                        $scope.setLoading(false);
                        $scope.failed = 0;
                        $scope.success = 1;
						$location.path('/success/Object/<#= _modelDisplayName #>/Action/Created');
                    }//if
                    else
                    {
                        $scope.ErrorMessage = "Request could not be performed (Reason:" + data.message + ")";
                        $scope.error = 1;
                        $scope.setLoading(false);
                        $scope.button = "Create <#= _modelDisplayName#>";
                    }
                    //alert("Success!");
                }).error(function (data, status, headers, config) {
                    //alert("Error Number:" + status);
                    $scope.ErrorMessage = "Request could not be performed (Error Number:" + status+")";
                    $scope.error = 1;
                    $scope.setLoading(false);
                    $scope.button = "Create <#= _modelDisplayName#>";
                    //alert("Error!");
                });
            };
        };
        $scope.setLoading = function (isLoading) { $scope.loading = isLoading; if (isLoading) ngProgress.start(); else ngProgress.complete(); };
    });
    
    
    $('form').submit(function (evt) {
        evt.preventDefault();
    });
</script>
<#@ include file="ModelMetadataFunctions.cs.include.t4" #>